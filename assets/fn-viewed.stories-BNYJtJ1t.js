import{v as R}from"./v4-CQkTLCs1.js";import{C as v}from"./utils-CG_vfxgm.js";const{addons:T}=__STORYBOOK_MODULE_PREVIEW_API__,{ImplicitActionsDuringRendering:S}=__STORYBOOK_MODULE_CORE_EVENTS_PREVIEW_ERRORS__,{global:_}=__STORYBOOK_MODULE_GLOBAL__;var b="storybook/actions",D=`${b}/action-event`,P={depth:10,clearOnStoryChange:!0,limit:50},g=(t,r)=>{let e=Object.getPrototypeOf(t);return!e||r(e)?e:g(e,r)},I=t=>!!(typeof t=="object"&&t&&g(t,r=>/^Synthetic(?:Base)?Event$/.test(r.constructor.name))&&typeof t.persist=="function"),A=t=>{if(I(t)){let r=Object.create(t.constructor.prototype,Object.getOwnPropertyDescriptors(t));r.persist();let e=Object.getOwnPropertyDescriptor(r,"view"),n=e==null?void 0:e.value;return typeof n=="object"&&(n==null?void 0:n.constructor.name)==="Window"&&Object.defineProperty(r,"view",{...e,value:Object.create(n.constructor.prototype)}),r}return t},j=()=>typeof crypto=="object"&&typeof crypto.getRandomValues=="function"?R():Date.now().toString(36)+Math.random().toString(36).substring(2);function L(t,r={}){let e={...P,...r},n=function(...a){var c,p;if(r.implicit){let d=(c="__STORYBOOK_PREVIEW__"in _?_.__STORYBOOK_PREVIEW__:void 0)==null?void 0:c.storyRenders.find(o=>o.phase==="playing"||o.phase==="rendering");if(d){let o=!((p=window==null?void 0:window.FEATURES)!=null&&p.disallowImplicitActionsInRenderV8),l=new S({phase:d.phase,name:t,deprecated:o});if(o)console.warn(l);else throw l}}let f=T.getChannel(),h=j(),y=5,s=a.map(A),E=a.length>1?s:s[0],w={id:h,count:0,data:{name:t,args:E},options:{...e,maxDepth:y+(e.depth||3),allowFunction:e.allowFunction||!1}};f.emit(D,w)};return n.isAction=!0,n.implicit=r.implicit,n}const M={title:"components/fn-viewed",tags:["autodocs"],parameters:{layout:"centered"},render:({innerHTML:t,...r})=>{const e=v("fn-viewed",r);return e.innerHTML=t,e.addEventListener("viewed",L("viewed")),e},argTypes:{}},i={args:{innerHTML:"This is a paragraph of text that will be tracked when it is viewed"}};var O,m,u;i.parameters={...i.parameters,docs:{...(O=i.parameters)==null?void 0:O.docs,source:{originalSource:`{
  args: {
    innerHTML: 'This is a paragraph of text that will be tracked when it is viewed'
  }
}`,...(u=(m=i.parameters)==null?void 0:m.docs)==null?void 0:u.source}}};const x=["Primary"];export{i as Primary,x as __namedExportsOrder,M as default};
